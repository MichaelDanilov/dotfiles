# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
# @TODO: add MySQL, merge with node, python or simple php server in folder
# http://html5.by/blog/run-http-server-from-current-directory/
function server() {
	case $1 in
		static )
			python -m http.server $2
			;;
		static80 )
			sleep 1 && open "http://localhost/" &
			sudo python -m http.server 80
			;;
		* )
			error dave
			;;
	esac
}

function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function pingtime() {
	ping $1 | perl -nle 'print scalar(localtime), " | ", $_'
}

function пше() {
	case $1 in
		ые )
			git st
			;;
		сшф )
			git cia
			;;
		сшь )
			git cim $2
			;;
		* )
			git $1 $2 $3 $4
			;;
	esac
	
}

# Echo error
function error() {
	case $1 in
		dave )
			echo "I can't do it, Dave!"
			;;
		princess )
			echo "Sorry, your princess is in another castle!"
			;;
		* )
			error dave
			;;
	esac
}

# Dead codes
function groom_dead_code {
	root="${2:-.}"
	for entry in "$1"/*
	do
		name=$(basename $entry)
		if [[ -z "$(grep -r "/$name'" $root)" ]]; then
		echo "$entry is unused"
		fi
	done
}

# Dead dependencies
function groom_dependencies {
	key=${1:-dependencies}
	for dep in $(cat package.json | jq -cr ".$key|keys|.[]");
	do [[ -z "$(grep -r  --exclude-dir=node_modules "'${dep}" .)" ]] && echo "$dep appears unused";
	done
}

function getpackagemanager() {
	echo $(cat ./package.json | jq '.packageManager' | sed -r 's/\"//g')
}

function pmuse() {
	allowed_package_managers=(pnpm npm yarn)
	package_manager=$(getpackagemanager)
	is_valid=0
	for pm in $allowed_package_managers; do
		if [[ $package_manager == $pm@* ]]; then
			is_valid=1
		fi
	done
	if [ $is_valid -eq 0 ]; then
		echo "Looks like your package manager '$package_manager' not allowed"
		return 1
	fi
	echo "'$package_manager' will be install:"
	npm install -g $(getpackagemanager)

	echo 'current package managers are:'
	for pm in $allowed_package_managers
	do
		echo "- $pm@$($pm --version)"
	done
}

function getPkgLatest() {
	local version=$(npm info $1 --json | jq '.["dist-tags"].latest' | sed -r 's/\"//g')
	echo "$1@$version"
}